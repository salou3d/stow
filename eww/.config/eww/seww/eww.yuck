;; ----- EWW WIDGETS -----

;; ----- WORKSPACES -----
(deflisten workspaces
  :initial "[]"
  "bash ~/.config/eww/scripts/hypr-get-workspaces"
)
(deflisten current_workspace
  :initial "1"
  "bash ~/.config/eww/scripts/hypr-get-active-workspace"
)

(deflisten window :initial "..." "sh ~/.config/eww/scripts/hypr-get-window-title")

(defvar workspace_clients '[{"title": "NO CLIENTS"}]' )

(defvar monitors '[]' )

(defwidget workspaces []
  (eventbox
    :onscroll "bash ~/.config/eww/scripts/hypr-change-active-workspace {} ${current_workspace}"
    ;:onrightclick "bash ~/.config/eww/scripts/hypr-update-workspace-clients ${EWW_CONFIG_DIR}"
    :class "workspaces-widget"
    (box :space-evenly false
      (label :text "${workspaces}${current_workspace}" :visible false)
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          :class "workspace-entry"
          (box
            :class "workspace-entry ${workspace.windows > 0 ? "occupied" : "empty"}"
            (label :text "${workspace.id}"
              :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""}"
)))))))

;; ----- ACTIVE WINDOW -----
(defwidget active_window []
  (eventbox
    :onclick "bash ~/.config/eww/scripts/hypr-update-workspace-clients ${EWW_CONFIG_DIR} ${current_workspace}"
    (label
      :class "active-window"
      :text "${window}"
      :limit-width 50
)))

;; ----- TASKS -----
(defwidget tasks []
  (box :class "tasks-box"
    :halign "center"
    :space-evenly false
    :orientation "h"
    :spacing 10
    (for entry in workspace_clients
      (button
        :class "task-btn"
        :tooltip "${ entry.title }"
        :onclick "${EWW_CMD} open taskswin --toggle; hyprctl dispatch focuswindow address:${entry.address}"
        (label :text "${entry.title}" :limit-width 50) ;; replace with an image/icon
        ;(image :icon "" :icon-size 32)
))))

;; ----- WORKSPACES OVERVIEW -----
(defwidget workspaces_overview []
  (box
    :class "workspaces-overview-box"
    :halign "center"
    :space-evenly true
    :orientation "v"
    :spacing 10
    ;(label :text "${workspaces}${current_workspace}" :visible true)
    (for workspace in workspaces
      (box
        :class "workspace-overview-entry"
        :orientation "v"
        (box
          :space-evenly false
          :spacing 5
          :orientation "h"
          :class "workspace-overview-entry ${workspace.windows > 0 ? "occupied" : "empty"}"
          (eventbox
            :onclick "hyprctl dispatch workspace ${workspace.id}"
            (label :text "${workspace.id}"
              :class "workspace-overview-entry ${workspace.id == current_workspace ? "current" : ""}"
          )))
        (box
          :orientation "h"
          :class "ws-overview-clients-box"
          :spacing 5
          :space-evenly false
          (for client in workspace_clients
            (eventbox
              :class "ws-overview-client-btn"
              :onclick "${EWW_CMD} open workspacewin --toggle; hyprctl dispatch focuswindow address:${client.address}"
              (label
                ;:visible '${client.workspace.id == workspace.id ? true : false}'
                :text '${client.workspace.id == workspace.id ? client.title : ""}'
                :limit-width 40
              )
            )
          )
        )
      )
)))

;; ----- LANGUAGE -----
(defpoll lang_var :interval "1s" :initial "Fr" `hyprctl devices -j | jaq -r '.keyboards | .[] | select( .main )'`)
(defwidget language []
  (button
    :class "info-lbl normal"
    :onclick "hyprctl switchxkblayout current next"
    (label :text " ${substring(lang_var.active_keymap, 0, 2)}"
      :tooltip "Current keyboard layout: ${lang_var.active_keymap}"
)))

;; ----- CLOCK -----
(defwidget time []
  (eventbox
    :class "clock"
    :onclick "${EWW_CMD} open calendar --toggle"
    :tooltip "${formattime(EWW_TIME, '%H:%M, %A %d %B %Y')}"
    (label
      :class "date-time"
      :text "${formattime(EWW_TIME, '%H:%M, %a %d-%m-%y')}"
)))

;; ----- CALENDAR -----
(defwidget cal []
  (box
    (calendar :halign "center" :valign "center" :class "cal" )
))

;; ----- CPU -----
(defwidget cpu []
  (button
    :onrightclick "./eww-launch qps"
    :class "info-lbl ${round(EWW_CPU.avg, 0) <= 50 ? 'normal': 50 < round(EWW_CPU.avg, 0) && round(EWW_CPU.avg, 0) <= 90 ? 'warning' : 'critical' }"
    (label
      :tooltip "CPU usage: ${round(EWW_CPU.avg, 0)}%"
      :text " ${round(EWW_CPU.avg, 0)}%"
)))

;; ----- MEMORY -----
(defwidget mem []
  (button
    :onrightclick "./eww-launch qps"
    :class "info-lbl ${round(EWW_RAM.used_mem_perc, 0) <= 50 ? 'normal' : 50 < round(EWW_RAM.used_mem_perc, 0) && round(EWW_RAM.used_mem_perc, 0) < 90 ? 'warning' : 'critical' }"
    (label
      :tooltip "Memory usage: ${round(EWW_RAM.used_mem_perc, 0)}%"
      :text " ${round(EWW_RAM.used_mem_perc, 0)}%"
)))

;; ----- TEMPERATURE -----
(defwidget temperature []
  (button
    :onrightclick "./eww-launch qps"
    :class "info-lbl ${EWW_TEMPS.CORETEMP_PACKAGE_ID_0 <= 50 ? 'normal': 50 < EWW_TEMPS.CORETEMP_PACKAGE_ID_0 && EWW_TEMPS.CORETEMP_PACKAGE_ID_0 < 80 ? 'warning' : 'critical' }"
    (label
      :tooltip "Package temperature: ${EWW_TEMPS.CORETEMP_PACKAGE_ID_0}°C"
      :text " ${EWW_TEMPS.CORETEMP_PACKAGE_ID_0}°C"
)))

;; ----- BATTERY -----
(defpoll battery_poll :interval "60s" "./battery.sh")
;(include "./battery.yuck")

(defwidget battery []
  (button
    :class "info-lbl ${battery_poll.percent >= 70 ? 'normal': 15 <= battery_poll.percent && battery_poll.percent < 70 ? 'warning' : 'critical' }"
    (label :text "${battery_poll.icon} ${battery_poll.percent}%"
      :limit-width 10
      :tooltip "${battery_poll.status}: ${battery_poll.percent}"
)))

;; ----- BRIGHTNESS -----
(defpoll brightness_var :interval "1s" "brightnessctl -m | awk -F, '{gsub(/%/, \"\", $4); print $4}'")
(defwidget brightness []
  (button
    :class "info-lbl ${ brightness_var <= 50 ? 'normal': 50 < brightness_var && brightness_var <= 75 ? 'warning' : 'critical' }"
    (label :text " ${brightness_var}%"
      :tooltip "Current screen brightness: ${brightness_var}%"
)))

;; ----- VOLUME -----
(defpoll volume_var :interval "1s" :initial 0 'pamixer --get-volume')
(defpoll micvolume_var :interval "1s" :initial 0 'pamixer --get-volume --source 0')

(defwidget volume []
  (button
    :onrightclick "./eww-launch pavucontrol"
    :class "info-lbl ${ volume_var <= 50 ? 'normal': 50 < volume_var && volume_var <= 75 ? 'warning' : 'critical' }"
    (label :text "  ${volume_var}%"
      :tooltip "Current Volume: ${volume_var}%"
)))

(defwidget micvolume []
  (button
    :onrightclick "./eww-launch pavucontrol"
    :class "info-lbl ${ micvolume_var <= 50 ? 'normal': 50 < micvolume_var && micvolume_var <= 75 ? 'warning' : 'critical' }"
    (label :text " ${micvolume_var}%"
      :tooltip "Current input (microphone volume): ${micvolume_var}%"
)))

;; ----- TRAY -----

(defwidget ewwtray []
  (systray :class "ewwtray"
    :spacing 7
    :orientation "h"
    :space-evenly false
    :icon-size 14
    :prepend-new true
))

;; ----- NOTIFICATIONS -----
(deflisten notifications_pol
  :initial '{ "count": 0, "dnd": false, "visible": false, "inhibited": false }'
  "swaync-client -s"
)

(defwidget notifications []
  (button :class "notification"
    :onclick "swaync-client -t -sw"
    :onrightclick "swaync-client -d -sw"
    (box
      :space-evenly false
      :spacing 0
      :tooltip "Notifications count: ${notifications_pol.count}"
      (image
        :class "notification-icon-image"
        :style "background-image: -gtk-icontheme('${notifications_pol.inhibited || notifications_pol.dnd ? "notification-disabled" : notifications_pol.count > 0 ? "notification-active" : "notification-inactive" }');"
      )
      (label
        :class "notification-count"
        :visible {notifications_pol.count > 0 ? true : false}
        :markup "<sup>${notifications_pol.count > 0 ? notifications_pol.count : ""}</sup>"
))))

;; ----- SYS INFO -----
(defwidget sys_info []
  (box :class "sys-info"
    :space-evenly false
    :orientation "h"
    :spacing 10
    (eventbox
        :halign "start"
        :space-evenly false
        :orientation "h"
        :onclick '${EWW_CMD} open sys-info-panel --toggle'
        (box :class "sys-info-box"
          :spacing 0
          (cpu)
          (mem)
          (temperature)
          (battery)
    ))
    (eventbox
        :halign "start"
        :space-evenly false
        :orientation "h"
        :onclick '${EWW_CMD} open sys-info-panel --toggle'
        (box :class "sys-info-box"
          :spacing 0
          (brightness)
          (volume)
          (micvolume)
    ))
    (box :class "sys-info-box"
        :halign "start"
        :space-evenly false
        :orientation "h"
        :spacing 7
        (language)
        (notifications)
        (ewwtray)
)))

;; ----- LAYOUT WIDGETS -----

(defwidget left_eww []
  (box :class "left-eww"
    :halign "start"
    :space-evenly false
    :orientation "h"
    :spacing 10
    (workspaces)
    (active_window)
))

(defwidget center_eww []
  (box :class "center-eww"
    :halign "center"
    :space-evenly false
    :orientation "h"
    (time)
))

(defwidget right_eww []
  (box :class "right-eww"
    :halign "end"
    :space-evenly false
    :orientation "h"
    :spacing 10
    (sys_info)
))

;; ----- BAR LAYOUT -----

(defwidget bar_layout []
  (centerbox :class "bar-layout"
    :orientation "h"
    (left_eww)
    (center_eww)
    (right_eww)
))

;; ----- WINDOWS -----

(include "./sys-info-panel.yuck")

(defwindow calendar
  :monitor 0
  :geometry (geometry
    :x "0%"
    :y "0%"
    :width "270px"
    :height "60px"
    :anchor "top center"
  )
  (cal)
)

(defwindow taskswin
  :monitor 0
  :stacking "fg"
  :exclusive false
  ;:focusable true
  :geometry (geometry
    :x "0%"
    :y "0%"
    :width "100%"
    :height "64px"
    :anchor "top center"
  )
  (tasks)
)

(defwindow workspacewin
  :monitor 0
  :stacking "fg"
  :exclusive false
  ;:focusable true
  :geometry (geometry
    :x "0%"
    :y "0%"
    :width "100%"
    :height "64px"
    :anchor "left top"
  )
  (workspaces_overview)
)

(defwindow sewwbar
  :monitor 0
  :stacking "bg"
  :exclusive true
  ;:focusable false
  :geometry (geometry :x "0%"
    :y "0%"
    :width "100%"
    :height "24px"
    :anchor "top center"
  )
  (bar_layout)
)
