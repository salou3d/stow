# Sample .bashrc for SUSE Linux
# Copyright (c) SUSE Software Solutions Germany GmbH

# There are 3 different types of shells in bash: the login shell, normal shell
# and interactive shell. Login shells read ~/.profile and interactive shells
# read ~/.bashrc; in our setup, /etc/profile sources ~/.bashrc - thus all
# settings made here will also take effect in a login shell.
#
# NOTE: It is recommended to make language settings in ~/.profile rather than
# here, since multilingual X sessions would not work properly if LANG is over-
# ridden in every subshell.

test -s ~/.alias && . ~/.alias || true

eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv bash)"
# [[ -r "/home/linuxbrew/.linuxbrew/etc/profile.d/bash_completion.sh" ]] && . "/home/linuxbrew/.linuxbrew/etc/profile.d/bash_completion.sh"
if type brew &>/dev/null
then
  HOMEBREW_PREFIX="$(brew --prefix)"
  if [[ -r "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh" ]]
  then
    source "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"
  else
    for COMPLETION in "${HOMEBREW_PREFIX}/etc/bash_completion.d/"*
    do
      [[ -r "${COMPLETION}" ]] && source "${COMPLETION}"
    done
  fi
fi


export HISTCONTROL=erasedups:ignoredups:ignoreboth
export HISTTIMEFORMAT="%Y-%m-%d %T "

#alias ls="eza --group-directories-first --icons"
alias ls="lsd --group-directories-first"
alias sl="lsd --group-directories-first"
alias l="lsd --group-directories-first"
alias dir='lsd --group-directories-first'
alias ll='lsd -l --group-directories-first'
alias la='lsd -a --group-directories-first'
alias lt='lsd -a --tree --depth 1 --group-directories-first'
alias laf='lsd -alF --group-directories-first'
alias lal='lsd -al --group-directories-first'
alias ..="cd .."
#alias handlr="handlr-regex"

alias shutdown="systemctl shutdown"
alias reboot="systemctl reboot"

alias ping-cf="ping -c 3 1.1.1.1"
alias ping-ggl="ping -c 3 8.8.8.8"

# alias zyref="sudo zypper ref"
# alias zydup="sudo zypper dup"
alias mytcc="python3 -i ~/.local/bin/ytcc-subs.py"

alias cp="cp -i"
alias mv="mv -i"
alias mkdir='mkdir -p'
#alias ps='ps auxf'
alias less='less -R'
alias rt="trash put"
alias tp="trash put"


if ! command -v kate >/dev/null 2>&1; then
	if command -v org.kde.kate >/dev/null 2>&1; then
		alias kate="org.kde.kate"
	elif flatpak list --app --columns=application | grep org.kde.kate >/dev/null 2>&1; then
		alias kate="flatpak run org.kde.kate"
	fi
fi

if ! command -v ark >/dev/null 2>&1; then
	if command -v org.kde.ark >/dev/null 2>&1 && [ -s "$(which org.kde.ark)" ] ; then
		ln -s $(which org.kde.ark) ~/.local/bin/ark
	elif flatpak list --app --columns=application | grep org.kde.ark >/dev/null 2>&1; then
		printf '#!/usr/bin/env bash\nflatpak run org.kde.ark "$@"\n' > ~/.local/bin/ark
		chmod +x ~/.local/bin/ark
	fi
fi


alias iron-restart="pkill ironbar && ironbar"
alias iron-reload="ironbar reload && ironbar load-css ~/.config/ironbar/style.css "

if [ ! -f ~/.local/bin/python ]; then
	ln -s $(which python3) ~/.local/bin/python
fi

# Show the current distribution
distribution ()
{
	local dtype="unknown"  # Default to unknown

	# Use /etc/os-release for modern distro identification
	if [ -r /etc/os-release ]; then
		source /etc/os-release
		case $ID in
			fedora|rhel|centos)
				dtype="redhat"
				;;
			sles|opensuse*)
				dtype="suse"
				;;
			ubuntu|debian)
				dtype="debian"
				;;
			gentoo)
				dtype="gentoo"
				;;
			arch)
				dtype="arch"
				;;
			slackware)
				dtype="slackware"
				;;
			*)
				# If ID is not recognized, keep dtype as unknown
				;;
		esac
	fi

	echo $dtype
}

# Show the current version of the operating system
ver() {
	local dtype
	dtype=$(distribution)

	case $dtype in
		"redhat")
			if [ -s /etc/redhat-release ]; then
				cat /etc/redhat-release
			else
				cat /etc/issue
			fi
			uname -a
			;;
		"suse")
			#cat /etc/SuSE-release
			cat /etc/os-release
			;;
		"debian")
			lsb_release -a
			;;
		"gentoo")
			cat /etc/gentoo-release
			;;
		"arch")
			cat /etc/os-release
			;;
		"slackware")
			cat /etc/slackware-version
			;;
		*)
			if [ -s /etc/issue ]; then
				cat /etc/issue
			else
				echo "Error: Unknown distribution"
				exit 1
			fi
			;;
	esac
}

function yy() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

[[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh

eval "$(register-python-argcomplete pipx)"

# eval "$(batman --export-env)"

alias bathelp='bat --plain --language=help'
help() {
    "$@" --help 2>&1 | bathelp
}

# eval "$(jay generate-completion bash)"

export FZF_DEFAULT_COMMAND='fd -u'
export FZF_DEFAULT_OPTS='--multi --reverse --border' # --cycle --marker="+"
eval "$(fzf --bash)"

export SKIM_DEFAULT_COMMAND='fd -u'
export SKIM_DEFAULT_OPTIONS='--no-multi --reverse --border'

# eval "$(tv init bash)"

# ripgrep->fzf->hx [QUERY]
rfv() {
  RELOAD='reload:rg --column --color=always --smart-case {q} || :'
  OPENER='if [[ $FZF_SELECT_COUNT -eq 0 ]]; then
            hx {1} +{2}     # No selection. Open the current line in Vim.
          else
            hx -q {+f}  # Build quickfix list for the selected items.
          fi'
  fzf --disabled --ansi --multi \
      --bind "start:$RELOAD" --bind "change:$RELOAD" \
      --bind "enter:become:$OPENER" \
      --bind "ctrl-o:execute:$OPENER" \
      --bind 'alt-a:select-all,alt-d:deselect-all,ctrl-/:toggle-preview' \
      --delimiter : \
      --preview 'bat --style=full --color=always --highlight-line {2} {1}' \
      --preview-window '~4,+{2}+4/3,<80(up)' \
      --query "$*"
}


# export MCFLY_LIGHT=TRUE
export MCFLY_KEY_SCHEME=vim # Default; emacs
# export MCFLY_FUZZY=2
# export MCFLY_RESULTS=20 # Default: 30
# export MCFLY_DELETE_WITHOUT_CONFIRM=true
# export MCFLY_INTERFACE_VIEW=TOP
# export MCFLY_DISABLE_MENU=TRUE
# export MCFLY_RESULTS_SORT=LAST_RUN # Default: RANK
export MCFLY_PROMPT="❯ "
eval "$(mcfly init bash)"

# eval "$(atuin init bash)"

# eval "$(navi widget bash)"

eval "$(eww shell-completions --shell bash)"

eval -- "$(starship init bash --print-full-init)"

# eval "$(wl-screenrec --generate-completions bash)"


if [ -f  ~/.config/broot/launcher/bash/br ]; then
	source ~/.config/broot/launcher/bash/br
fi

if [ -f  ~/.fzfcolors.sh ]; then
	source ~/.fzfcolors.sh
fi

if [ -f  ~/.sweep.sh ]; then
  source ~/.sweep.sh
fi


# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

eval "$(luarocks path)"

export _ZO_ECHO=1
export _ZO_FZF_OPTS='--no-multi --reverse --border'
#eval "$(zoxide init --cmd cd bash)"
eval "$(zoxide init bash)"

